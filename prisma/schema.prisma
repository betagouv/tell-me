datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// =========================================================
// Constants

enum SurveyBlockType {
  CONTENT_QUESTION
  CONTENT_TEXT
  INPUT_CHECKBOX
  INPUT_CHOICE
  INPUT_FILE
  INPUT_LONG_ANSWER
  INPUT_SHORT_ANSWER
}

enum UserRole {
  ADMINISTRATOR
  MANAGER
  VIEWER
}

// =========================================================
// Models

model OneTimeToken {
  id        String   @id @default(cuid())
  ip        String
  value     String   @unique
  createdAt DateTime @default(now())
  expiredAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model PersonalAccessToken {
  id        String   @id @default(cuid())
  name      String?
  label     String?
  value     String   @unique
  createdAt DateTime @default(now())
  expiredAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model RefreshToken {
  id        String   @id @default(cuid())
  ip        String
  value     String   @unique
  createdAt DateTime @default(now())
  expiredAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Survey {
  id              String   @id @default(cuid())
  title           String   @unique
  slug            String   @unique
  isPublished     Boolean  @default(false)
  headerUrl       String?
  logoUrl         String?
  thankYouMessage String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  blocks  SurveyBlock[]
  entries SurveyEntry[]
  owner   User          @relation("OwnedSurveys", fields: [ownerId], references: [id])
  ownerId String
}

model SurveyBlock {
  id           String          @id @default(cuid())
  type         SurveyBlockType
  value        String
  positionPage Int
  positionRank Int
  isHidden     Boolean         @default(false)
  isRequired   Boolean         @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  ifSelectedThenShowQuestion   SurveyBlock?  @relation("VisibilityToggleInputs", fields: [ifSelectedThenShowQuestionId], references: [id])
  ifSelectedThenShowQuestionId String?
  survey                       Survey        @relation(fields: [surveyId], references: [id])
  surveyId                     String
  visibilityToggleInputs       SurveyBlock[] @relation("VisibilityToggleInputs")
}

model SurveyEntry {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answers  SurveyEntryAnswer[]
  survey   Survey              @relation(fields: [surveyId], references: [id])
  surveyId String
}

model SurveyEntryAnswer {
  id        String          @id @default(cuid())
  question  String
  type      SurveyBlockType
  value     Json
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  surveyEntry   SurveyEntry @relation(fields: [surveyEntryId], references: [id])
  surveyEntryId String
}

model User {
  id        String   @id @default(cuid())
  role      UserRole @default(VIEWER)
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  oneTimeTokens        OneTimeToken[]
  personalAccessTokens PersonalAccessToken[]
  refreshTokens        RefreshToken[]
  config               UserConfig?
  ownedSurveys         Survey[]              @relation("OwnedSurveys")
}

model UserConfig {
  id        String   @id @default(cuid())
  locale    String   @default("en-US")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], map: "UserConfig_userId_fkey")
  userId String @unique
}
